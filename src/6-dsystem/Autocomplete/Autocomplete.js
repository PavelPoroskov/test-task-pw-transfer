/* eslint no-unused-vars: ["error", { "ignoreRestSiblings": true }] */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import constants from './constants';
import idgen from './idgen';

class Autocomplete extends Component {
  constructor(props) {
    super(props);
    
    this.id = props.id || `autocomplete-input-${idgen()}`;

    this.state = {
      value: props.value || '',
      itemSelected: false,
      prevData: props.options.data,
    };

    this._onChange = this._onChange.bind(this);
    this._onAutocomplete = this._onAutocomplete.bind(this);
  }

  static getDerivedStateFromProps(props, state) {
    if (props.options.data !== state.prevData) {
      return {
        prevData: props.options.data,
      };
    }
    return null;
  }  
  componentDidMount() {
    if (typeof M !== 'undefined') {
      const { options } = this.props;
      this.instance = window.M.Autocomplete.init(this.inputRef, {
        onAutocomplete: this._onAutocomplete,
        ...options,
      })
    }
  }
  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate')
    if (this.state.prevData !== prevState.prevData) {
      console.log('componentDidUpdate updateData')
      console.log(this.state.prevData)
      this.instance.updateData(this.state.prevData);
      this.instance.open();
    }
  }
  componentWillUnmount() {
    if (this.instance) {
      this.instance.destroy();
    }
  }

  _onChange(e) {
    const { onChange } = this.props;
    const value = e.target.value;
    onChange && onChange(e, value);

    this.setState({ value, itemSelected: false });
  }

  _onAutocomplete(value, e) {
    const { onChange } = this.props;
    onChange && onChange(e, value);

    this.setState({ value, itemSelected: true });
  }

  render() {
    const {
      label,
      inputClassName,
      success,
      error,
      icon,
      s,
      m,
      l,
      xl,
      disabled,
      noLayout,
      placeholder,
      // these are mentioned here only to prevent from getting into ...props
      validate,
      value,
      onChange,
      options,
      ...other
    } = this.props;

    const sizes = { s, m, l, xl };

    let responsiveClasses;
    if (!noLayout) {
      responsiveClasses = { col: true };
      constants.SIZES.forEach(size => {
        responsiveClasses[size + sizes[size]] = sizes[size];
      });
    }

    const wrapperClasses = cx('input-field', responsiveClasses);

    const inputProps = {
      placeholder,
      type: "text",
      id: this.id,
      // defaultValue,
      disabled,
      onChange: this._onChange,
      value: this.state.value,

      ...other
    };

    const renderLabel = () =>
      label && (
        <label
          className={cx({
            active: value || placeholder,
            'label-icon': typeof label !== 'string'
          })}
          data-success={success}
          data-error={error}
          htmlFor={inputProps.id}
        >
          {label}
        </label>
      );
    const renderHelper = () =>
      (error || success) && (
        <span
          className="helper-text"
          data-error={error}
          data-success={success}
        />
      );
    const renderIcon = () => {
      if (!icon) return;

      if (typeof icon === 'string') {
        return <i className="material-icons prefix">{icon}</i>;
      }

      return React.cloneElement(icon, { className: 'prefix' });
    };
  
    return (
      <div className={wrapperClasses}>
        {renderIcon()}
        <input
          ref={el => {
            this.inputRef = el;
          }}
          className={cx("autocomplete", { validate }, inputClassName)}
          {...inputProps}
        />
        {renderLabel()}
        {renderHelper()}
      </div>
    );
  }
}

Autocomplete.propTypes = {
  /**
   * Uniquely identifies <input> generated by this component
   * Used by corresponding <label> for attribute
   */
  id: PropTypes.string,
  className: PropTypes.string,
  /*
   * The title of the autocomplete component.
   */
  title: PropTypes.string,
  /*
   * Optional materialize icon to add to the autocomplete bar
   */
  icon: PropTypes.string,
  s: PropTypes.number,
  m: PropTypes.number,
  l: PropTypes.number,
  xl: PropTypes.number,
  offset: PropTypes.string,
  /**
   * Placeholder for input element
   * */
  placeholder: PropTypes.string,
  /**
   * Called when the value of the input gets changed - by user typing or clicking on an auto-complete item.
   * Function signature: (event, value) => ()
   */
  onChange: PropTypes.func,
  /**
   * The value of the input
   */
  value: PropTypes.string,
  /**
   * Options for the autocomplete
   * <a target="_blank" rel="external" href="https://materializecss.com/autocomplete.html#options</a>
   */
  options: PropTypes.shape({
    /**
     * Data object defining autocomplete options with optional icon strings.
     */
    data: PropTypes.object.isRequired,
    /**
     * Limit of results the autocomplete shows.
     */
    limit: PropTypes.number,
    /**
     * Callback for when autocompleted.
     */
    onAutocomplete: PropTypes.func,
    /**
     * 	Minimum number of characters before autocomplete starts.
     */
    minLength: PropTypes.number,
    /**
     * Sort function that defines the order of the list of autocomplete options.
     */
    sortFunction: PropTypes.func
  })
};

Autocomplete.defaultProps = {
  options: {
    data: {},
    limit: Infinity,
    onAutocomplete: null,
    minLength: 1,
    sortFunction: null
  }
};

export default Autocomplete;
